/*
Copyright 2021-2022 Red Hat, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/stuartwdouglas/multi-arch-host-resolver/pkg/apis/hostpool/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// HostPoolLister helps list HostPools.
// All objects returned here must be treated as read-only.
type HostPoolLister interface {
	// List lists all HostPools in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.HostPool, err error)
	// HostPools returns an object that can list and get HostPools.
	HostPools(namespace string) HostPoolNamespaceLister
	HostPoolListerExpansion
}

// hostPoolLister implements the HostPoolLister interface.
type hostPoolLister struct {
	indexer cache.Indexer
}

// NewHostPoolLister returns a new HostPoolLister.
func NewHostPoolLister(indexer cache.Indexer) HostPoolLister {
	return &hostPoolLister{indexer: indexer}
}

// List lists all HostPools in the indexer.
func (s *hostPoolLister) List(selector labels.Selector) (ret []*v1alpha1.HostPool, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.HostPool))
	})
	return ret, err
}

// HostPools returns an object that can list and get HostPools.
func (s *hostPoolLister) HostPools(namespace string) HostPoolNamespaceLister {
	return hostPoolNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// HostPoolNamespaceLister helps list and get HostPools.
// All objects returned here must be treated as read-only.
type HostPoolNamespaceLister interface {
	// List lists all HostPools in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.HostPool, err error)
	// Get retrieves the HostPool from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.HostPool, error)
	HostPoolNamespaceListerExpansion
}

// hostPoolNamespaceLister implements the HostPoolNamespaceLister
// interface.
type hostPoolNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all HostPools in the indexer for a given namespace.
func (s hostPoolNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.HostPool, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.HostPool))
	})
	return ret, err
}

// Get retrieves the HostPool from the indexer for a given namespace and name.
func (s hostPoolNamespaceLister) Get(name string) (*v1alpha1.HostPool, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("hostpool"), name)
	}
	return obj.(*v1alpha1.HostPool), nil
}
