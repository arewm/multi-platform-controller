apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: provision-shared-host
  namespace: multi-platform-controller
spec:
  description: >-
    This task will create a new user on a host, setup ssh keys, and then create the relevant secret.
  params:
    - name: SECRET_NAME
      type: string
    - name: TASKRUN_NAME
      type: string
    - name: NAMESPACE
      type: string
    - name: HOST
      type: string
    - name: USER
      type: string
  workspaces:
    - name: ssh
  steps:
    - name: provision
      image: quay.io/redhat-appstudio/multi-platform-runner:01c7670e81d5120347cf0ad13372742489985e5f
      imagePullPolicy: Always
      volumeMounts:
        - mountPath: /tls
          name: tls
      script: |
        #!/bin/bash
        cd /tmp
        set -o verbose
        set -eu
        set -o pipefail
        mkdir -p /root/.ssh
        cp $(workspaces.ssh.path)/id_rsa /tmp/master_key
        chmod 0400 /tmp/master_key
        export SSH_HOST=$(params.USER)@$(params.HOST)
        
        export USERNAME=u-$(echo $(params.TASKRUN_NAME)$(params.NAMESPACE) | md5sum | cut -b-28)
        
        cat >script.sh <<EOF
        sudo dnf install podman -y
        rm -f $USERNAME $USERNAME.pub
        sudo useradd -m $USERNAME -p $(openssl rand -base64 12)
        ssh-keygen -N '' -f $USERNAME
        sudo su $USERNAME -c 'mkdir /home/$USERNAME/.ssh'
        sudo su $USERNAME -c 'mkdir /home/$USERNAME/build'
        sudo cp $USERNAME.pub /home/$USERNAME/.ssh/authorized_keys
        sudo chown $USERNAME /home/$USERNAME/.ssh/authorized_keys
        EOF
        ssh -i /tmp/master_key -o StrictHostKeyChecking=no $SSH_HOST "bash -s" <script.sh
        ssh -i /tmp/master_key -o StrictHostKeyChecking=no $SSH_HOST cat $USERNAME  >id_rsa
        ssh -i /tmp/master_key -o StrictHostKeyChecking=no $SSH_HOST rm $USERNAME
        chmod 0400 id_rsa
        ssh -i id_rsa -o StrictHostKeyChecking=no $USERNAME@$(params.HOST) echo "test"
        KEY=$(cat id_rsa)
        echo $KEY
        HOST=$(echo $USERNAME@$(params.HOST) | base64 -w 0)
        DIR=$(echo /home/$USERNAME | base64 -w 0)
        
        
        if [ -e "/tls/tls.crt" ]; then
          OTP=$(curl --cacert /tls/tls.crt -XPOST -d "$KEY" https://multi-platform-otp-server.multi-platform-controller.svc.cluster.local/store-key | base64 -w 0)
          OTP_SERVER="$(echo https://multi-platform-otp-server.multi-platform-controller.svc.cluster.local/otp | base64 -w 0)"
          echo $OTP | base64 -d
          cat >secret.yaml <<EOF
          apiVersion: v1
          data:
            otp-ca: "$(cat /tls/tls.crt | base64 -w 0)"
            otp: "$OTP"
            otp-server: "$OTP_SERVER"
            host: "$HOST"
            user-dir: "$DIR"
          kind: Secret
          metadata:
            name: $(params.SECRET_NAME)
            namespace: $(params.NAMESPACE)
            labels:
              build.appstudio.redhat.com/multi-platform-secret: "true"
          type: Opaque
        EOF
        else
          cat >secret.yaml <<EOF
          apiVersion: v1
          data:
            id_rsa: "$(echo $KEY | base64 -w 0)"
            host: "$HOST"
            user-dir: "$DIR"
          kind: Secret
          metadata:
            name: $(params.SECRET_NAME)
            namespace: $(params.NAMESPACE)
            labels:
              build.appstudio.redhat.com/multi-platform-secret: "true"
          type: Opaque
        EOF
        fi
        
        kubectl create -f secret.yaml
  volumes:
    - name: tls
      secret:
        optional: true
        secretName: otp-tls-secrets
